{"version":3,"file":"static/js/502.d3b21af3.chunk.js","mappings":"mPA4JAA,IAAAA,aAAmBC,QAAQC,KACxBC,IAEC,GAAmB,WAAfA,EAAOC,KAAmC,aAAfD,EAAOC,IAAoB,CACxD,MAAMC,GAAQC,EAAAA,EAAAA,IAAgB,SAC1BD,IACFF,EAAOI,QAAQC,cAAgBH,EAEnC,CACA,OAAOF,CAAM,IAEdM,GACQC,QAAQC,OAAOF,KAG1BT,IAAAA,aAAmBY,SAASV,KACzBW,GAIQA,IAERJ,GACQC,QAAQC,OAAOF,K,cC5KX,SAASK,IACtB,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,KAqBtB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHH,UAAU,MACVI,KAAK,QACLC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,SA/BYC,IAChB,MAAM,SAAEC,EAAQ,SAAEC,GAAaF,EAChB,SAAZC,GAAmC,UAAbA,EACvBE,EAAAA,GAAQC,MAAM,0DCVb,SAAeC,GACpB,MAAM,SAAEJ,GAAaI,EACrB,OAAO,IAAItB,SAAQ,CAACuB,EAAStB,KAC3BuB,YAAW,KACTD,EAAQ,CACNE,KAAMP,EACNN,KAAiB,SAAXM,EAAmB,2BAAQ,iCACjCvB,MAAO,4BACP,GACD,IAAK,GAEZ,CDCM+B,CAAM,CACJR,WACAC,aACCQ,MAAKxB,IACG,OAATE,QAAS,IAATA,GAAAA,EAAWuB,YAAYzB,IACvB0B,EAAAA,EAAAA,IAAgB,QAAS1B,EAAIR,OAC7ByB,EAAAA,GAAQU,QAAQ,gBAADC,OAAQ5B,EAAIS,KAAI,mBAC/BoB,OAAOC,SAASC,KAAO,YAAY,GAEvC,EAkBIC,eAfkBC,IACtBC,QAAQC,IAAI,UAAWF,EAAU,EAe7BG,aAAa,MAAK9B,SAAA,EAElBF,EAAAA,EAAAA,KAACI,EAAAA,EAAK6B,KAAI,CACRC,MAAM,eACN7B,KAAK,WACL8B,MAAO,CAACC,UAAW,QACnBC,MAAO,CACL,CACEC,UAAU,EACVzB,QAAS,yCAEXX,UAEFF,EAAAA,EAAAA,KAACuC,EAAAA,EAAK,CAACC,YAAY,qBAGrBxC,EAAAA,EAAAA,KAACI,EAAAA,EAAK6B,KAAI,CACRC,MAAM,eACN7B,KAAK,WACLgC,MAAO,CACL,CACEC,UAAU,EACVzB,QAAS,yCAEXX,UAEFF,EAAAA,EAAAA,KAACuC,EAAAA,EAAME,SAAQ,CAACD,YAAY,sCAG9BxC,EAAAA,EAAAA,KAACI,EAAAA,EAAK6B,KAAI,CACRzB,WAAY,CACVkC,OAAQ,GACRnC,KAAM,IACNL,UAEFF,EAAAA,EAAAA,KAAC2C,EAAAA,EAAM,CAAC1C,UAAU,QAAQ2C,KAAK,UAAUC,SAAS,SAAQ3C,SAAC,gBAOrE,C,iBEpFA,SAAS4C,EAAWzC,GAClB,OAAO0C,eAAeC,QAAQ3C,EAChC,CACA,SAAS4C,EAAW5C,EAAM6C,GACxB,OAAOH,eAAeI,QAAQ9C,EAAM6C,EACtC,CAIA,SAAS7D,EAAgBgB,GACvB,OAAO+C,aAAaJ,QAAQ3C,EAC9B,CACA,SAASiB,EAAgBjB,EAAM6C,GAC7B,OAAOE,aAAaD,QAAQ9C,EAAM6C,EACpC,C","sources":["utils/request.js","pages/Login/index.jsx","service/user/user.js","utils/session.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { message } from \"antd\";\r\nimport { getLocalStorage, clearLocalStorage, setLocalStorage } from \"./session\";\r\n\r\nconst BASE_URL = \"/\";\r\n\r\nfunction successState(response, method) {\r\n  // 统一判断后端返回的错误码\r\n  const data = response.data;\r\n  if (data.code === 200) {\r\n    return data;\r\n  } else {\r\n    const error = new Error(\"请求错误\", data);\r\n    error.response = response;\r\n    if (data.code === 401) {\r\n      window.location.hash = \"#/login\";\r\n      clearLocalStorage(\"token\");\r\n      throw error;\r\n    } else {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nfunction errorState(error) {\r\n  if (error.message) {\r\n    // console.log(\"error.response\", error.response);\r\n    if (error.response?.status === 401) {\r\n      message.config({\r\n        maxCount: 1, //最大提示框数量，超过限制被关闭\r\n      });\r\n      clearLocalStorage(\"token\");\r\n      window.location.hash = \"#/login\";\r\n    } else if (error.response?.status !== 200) {\r\n      //判断http返回状态码错误\r\n      message.config({\r\n        maxCount: 1, //最大提示框数量，超过限制被关闭\r\n      });\r\n    } else {\r\n      message.config({\r\n        maxCount: undefined, //最大提示框数量，超过限制被关闭\r\n      });\r\n    }\r\n    message.error(error.response?.data?.msg || error.message);\r\n  }\r\n}\r\n\r\nconst request = (options) => {\r\n  let { url, method, data = {}, params = {}, customSuccess, customError, headers, target, responseType } = options;\r\n  let { userInfo = {} } = JSON.parse(getLocalStorage(\"user\")) || {};\r\n\r\n  if (target) {\r\n    params = { user_id: userInfo?.userId, token: 1, ...params };\r\n  }\r\n\r\n  // 兼容新的接口php转java接口参数,必选account_id，user_id\r\n  if (target) {\r\n    data = { user_id: userInfo?.userId, account_id: userInfo?.accountId, ...data };\r\n  }\r\n\r\n  // 获取当前URL的哈希值\r\n  let currentHash = window.location.hash;\r\n\r\n  // 短剧channelId:21,漫剧channelId:23\r\n  const hashMapping = {\r\n    \"/content/shorttv\": {\r\n      channel_id: 21,\r\n      media_type: \"playlet\",\r\n    },\r\n    \"/content/animatedcomic\": {\r\n      channel_id: 23,\r\n      media_type: \"animatedcomic\",\r\n    },\r\n  };\r\n\r\n  // 检查当前哈希值是否包含特定路径\r\n  if (currentHash.includes(\"/content/shorttv\") || currentHash.includes(\"/content/animatedcomic\")) {\r\n    let { channel_id, media_type } = hashMapping[\"/content/shorttv\"];\r\n    if (currentHash.includes(\"/content/animatedcomic\")) {\r\n      ({ channel_id, media_type } = hashMapping[\"/content/animatedcomic\"]);\r\n    }\r\n\r\n    if (target === \"content\") {\r\n      if (method === \"get\") {\r\n        // 如果是其他请求，将channel_id和media_type添加到params对象中\r\n        params.channel_id = channel_id;\r\n        params.media_type = media_type;\r\n      } else {\r\n        // 如果是POST请求，将channel_id和media_type添加到data对象中\r\n        data.channel_id = channel_id;\r\n        data.media_type = media_type;\r\n      }\r\n    } else if (target === \"special\") {\r\n    } else {\r\n      if (method === \"get\") {\r\n        // 如果没有target且是其他请求，将默认channelId添加到params对象中\r\n        params.channelId = channel_id;\r\n      } else {\r\n        // 如果没有target且是POST请求，将默认channelId添加到data对象中\r\n        data.channelId = channel_id;\r\n      }\r\n    }\r\n  }\r\n\r\n  let httpDefaultOpts = {\r\n    // http默认配置\r\n    method: method,\r\n    baseURL: BASE_URL,\r\n    url: url,\r\n    timeout: 30000,\r\n    params: params,\r\n    data: data,\r\n    headers: {\r\n      // 'X-Requested-With': 'XMLHttpRequest',\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json; charset=UTF-8\",\r\n    },\r\n  };\r\n  if (responseType) {\r\n    httpDefaultOpts.responseType = options.responseType;\r\n  }\r\n  if (headers) {\r\n    httpDefaultOpts.headers[\"Content-Type\"] = headers[\"Content-Type\"];\r\n  }\r\n\r\n  let promise = new Promise(function (resolve, reject) {\r\n    axios(httpDefaultOpts)\r\n      .then((response) => {\r\n        if (response?.headers?.authorization) {\r\n          setLocalStorage(\"token\", response.headers.authorization);\r\n        }\r\n        if (httpDefaultOpts.responseType === \"blob\") {\r\n          resolve(response);\r\n        } else {\r\n          let res;\r\n          if (!customSuccess) {\r\n            res = successState(response, method);\r\n          } else {\r\n            res = customSuccess(response);\r\n          }\r\n          resolve(res);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (!customError) {\r\n          errorState(error);\r\n        } else {\r\n          customError(error);\r\n        }\r\n        reject(error?.response?.data || error);\r\n      });\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    // console.log('request.interceptors.request config',config)\r\n    if (config.url !== \"/login\" && config.url !== \"/captcha\") {\r\n      const token = getLocalStorage(\"token\");\r\n      if (token) {\r\n        config.headers.Authorization = token;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\naxios.interceptors.response.use(\r\n  (res) => {\r\n    // do something after getting the responese\r\n    // console.log('request res',res)\r\n    // return res.data\r\n    return res;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n    // switch (err.response?.status) {\r\n    //   case 401:\r\n    //     message.error('未授权！请重新登录')\r\n    //     clearLocalStorage('token')\r\n    //     window.location.href = '/#/login'\r\n    //     break\r\n    //   case 500:\r\n    //     message.error('服务器内部错误，请稍候重试')\r\n    //     break\r\n    //   default:\r\n    //     break\r\n    // }\r\n    // message.error(err.response?.data?.msg ||'服务器内部错误，请稍候重试')\r\n    // console.log('request err',err)\r\n  }\r\n);\r\n\r\nexport default request;\r\n","import React from 'react'\nimport { Button, Form, Input, message } from 'antd'\nimport { useStore } from '@/store'\nimport { login } from '@/service/user/user'\nimport { setLocalStorage } from '@/utils/session'\nimport './index.less'\n\nexport default function Login() {\n  const { userStore } = useStore()\n  const onFinish = (values) => {\n    const { username, password } = values\n    if(username!== 'user' && username !== 'admin') {\n      message.error('用户名错误！请检查')\n    } else {\n      login({\n        username,\n        password\n      }).then(res => {\n        userStore?.setUserInfo(res)\n        setLocalStorage('token', res.token)\n        message.success(`欢迎 ${ res.name }登录~~`)\n        window.location.href = '#/homepage'\n      })\n    }\n  }\n\n  const onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  }\n  return (\n    <div className='container'>\n      <Form\n        className='box'\n        name=\"basic\"\n        labelCol={{\n          span: 7,\n        }}\n        wrapperCol={{\n          span: 12,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n      >\n        <Form.Item\n          label=\"账号\"\n          name=\"username\"\n          style={{marginTop: '50px'}}\n          rules={[\n            {\n              required: true,\n              message: '请输入账号！',\n            },\n          ]}\n        >\n          <Input placeholder='user or admin'  />\n        </Form.Item>\n\n        <Form.Item\n          label=\"密码\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: '请输入密码！',\n            },\n          ]}\n        >\n          <Input.Password placeholder='密码随便输' />\n        </Form.Item>\n\n        <Form.Item\n          wrapperCol={{\n            offset: 11,\n            span: 16,\n          }}\n        >\n          <Button className='login' type=\"primary\" htmlType=\"submit\">\n            Login\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}\n","import request from '../../utils/request'\n\nexport function login(data) {\n  const { username } = data\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve({\n        role: username,\n        name: username==='user'? '萌新用户': '超级管理员',\n        token: 'Aaasfasgl1243124wdgwegwe'\n      })\n    }, 2000)\n  })\n}","function getSession(name) {\r\n  return sessionStorage.getItem(name)\r\n}\r\nfunction setSession(name, value) {\r\n  return sessionStorage.setItem(name, value)\r\n}\r\nfunction clearSession(name) {\r\n  return sessionStorage.removeItem(name)\r\n}\r\nfunction getLocalStorage(name) {\r\n  return localStorage.getItem(name)\r\n}\r\nfunction setLocalStorage(name, value) {\r\n  return localStorage.setItem(name, value)\r\n}\r\nfunction clearLocalStorage(name) {\r\n  return localStorage.removeItem(name)\r\n}\r\nexport { getSession, setSession, clearSession, getLocalStorage, setLocalStorage, clearLocalStorage }"],"names":["axios","request","use","config","url","token","getLocalStorage","headers","Authorization","err","Promise","reject","response","res","Login","userStore","useStore","_jsx","className","children","_jsxs","Form","name","labelCol","span","wrapperCol","onFinish","values","username","password","message","error","data","resolve","setTimeout","role","login","then","setUserInfo","setLocalStorage","success","concat","window","location","href","onFinishFailed","errorInfo","console","log","autoComplete","Item","label","style","marginTop","rules","required","Input","placeholder","Password","offset","Button","type","htmlType","getSession","sessionStorage","getItem","setSession","value","setItem","localStorage"],"sourceRoot":""}